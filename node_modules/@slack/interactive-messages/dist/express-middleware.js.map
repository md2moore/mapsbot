{"version":3,"sources":["../src/express-middleware.js"],"names":["createExpressMiddleware","errorCodes","NO_BODY_PARSER","TOKEN_VERIFICATION_FAILURE","debug","adapter","poweredBy","sendResponse","res","_sendResponse","dispatchResult","status","content","contentReady","then","Promise","resolve","c","set","json","end","reject","on","statusCode","_headers","slackMessageAdapterMiddleware","req","next","method","path","respond","body","error","Error","code","ssl_check","payload","JSON","parse","token","verificationToken","dispatch","catch"],"mappings":";;;;;;QAUgBA,uB,GAAAA,uB;;AAVhB;;;;AACA;;;;AAEO,IAAMC,kCAAa;AACxBC,kBAAgB,uCADQ;AAExBC,8BAA4B;AAFJ,CAAnB;;AAKP,IAAMC,QAAQ,qBAAa,gDAAb,CAAd;;AAEO,SAASJ,uBAAT,CAAiCK,OAAjC,EAA0C;AAC/C,MAAMC,YAAY,8BAAlB;;AAEA;AACA,WAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,WAAO,SAASC,aAAT,CAAuBC,cAAvB,EAAuC;AAAA,UACpCC,MADoC,GAChBD,cADgB,CACpCC,MADoC;AAAA,UAC5BC,OAD4B,GAChBF,cADgB,CAC5BE,OAD4B;;AAE5C,UAAMC,eAAgBD,WAAW,OAAOA,QAAQE,IAAf,KAAwB,UAApC,GAAkDF,OAAlD,GAA4DG,QAAQC,OAAR,CAAgBJ,OAAhB,CAAjF;AACA,aAAOC,aAAaC,IAAb,CAAkB,UAACG,CAAD,EAAO;AAC9BT,YAAIG,MAAJ,CAAWA,MAAX;AACAH,YAAIU,GAAJ,CAAQ,oBAAR,EAA8BZ,SAA9B;AACA,YAAIW,CAAJ,EAAO;AACLT,cAAIW,IAAJ,CAASF,CAAT;AACD,SAFD,MAEO;AACLT,cAAIY,GAAJ;AACD;AACD,eAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUK,MAAV,EAAqB;AACtCb,cAAIc,EAAJ,CAAO,QAAP,EAAiB,YAAM;AACrB;AACA;AACA;AACA;AACAlB,kBAAM,6CAAN,EAAqDI,IAAIe,UAAzD,EAAqEf,IAAIgB,QAAzE;AACAR,oBAAQR,GAAR;AACD,WAPD;AAQAA,cAAIc,EAAJ,CAAO,OAAP,EAAgBD,MAAhB;AACD,SAVM,CAAP;AAWD,OAnBM,CAAP;AAoBD,KAvBD;AAwBD;;AAED,SAAO,SAASI,6BAAT,CAAuCC,GAAvC,EAA4ClB,GAA5C,EAAiDmB,IAAjD,EAAuD;AAC5DvB,UAAM,yCAAN,EAAiDsB,IAAIE,MAArD,EAA6DF,IAAIG,IAAjE;;AAEA;AACA;AACA,QAAMC,UAAUvB,aAAaC,GAAb,CAAhB;;AAEA;AACA,QAAI,CAACkB,IAAIK,IAAT,EAAe;AACb,UAAMC,QAAQ,IAAIC,KAAJ,CAAU,uDAAV,CAAd;AACAD,YAAME,IAAN,GAAajC,WAAWC,cAAxB;AACAyB,WAAKK,KAAL;AACA;AACD;;AAED,QAAIN,IAAIK,IAAJ,CAASI,SAAb,EAAwB;AACtBL,cAAQ,EAAEnB,QAAQ,GAAV,EAAR;AACA;AACD;;AAED,QAAMyB,UAAUC,KAAKC,KAAL,CAAWZ,IAAIK,IAAJ,CAASK,OAApB,CAAhB;;AAEA;AACA,QAAI,CAACA,QAAQG,KAAT,IAAkBH,QAAQG,KAAR,KAAkBlC,QAAQmC,iBAAhD,EAAmE;AACjEpC,YAAM,oCAAN;AACA,UAAM4B,SAAQ,IAAIC,KAAJ,CAAU,+CAAV,CAAd;AACAD,aAAME,IAAN,GAAajC,WAAWE,0BAAxB;AACAwB,WAAKK,MAAL;AACA;AACD;AACD5B,UAAM,oCAAN;;AAEA0B,YAAQzB,QAAQoC,QAAR,CAAiBL,OAAjB,CAAR,EACGM,KADH,CACSf,IADT;AAED,GAlCD;AAmCD","file":"express-middleware.js","sourcesContent":["import debugFactory from 'debug';\nimport { packageIdentifier } from './util';\n\nexport const errorCodes = {\n  NO_BODY_PARSER: 'SLACKMESSAGEMIDDLEWARE_NO_BODY_PARSER',\n  TOKEN_VERIFICATION_FAILURE: 'SLACKMESSAGEMIDDLEWARE_TOKEN_VERIFICATION_FAILURE',\n};\n\nconst debug = debugFactory('@slack/interactive-messages:express-middleware');\n\nexport function createExpressMiddleware(adapter) {\n  const poweredBy = packageIdentifier();\n\n  // This function binds a specific response instance to a function\n  function sendResponse(res) {\n    return function _sendResponse(dispatchResult) {\n      const { status, content } = dispatchResult;\n      const contentReady = (content && typeof content.then === 'function') ? content : Promise.resolve(content);\n      return contentReady.then((c) => {\n        res.status(status);\n        res.set('X-Slack-Powered-By', poweredBy);\n        if (c) {\n          res.json(c);\n        } else {\n          res.end();\n        }\n        return new Promise((resolve, reject) => {\n          res.on('finish', () => {\n            // res._headers is an undocumented property, but we feel comfortable using it because:\n            // 1. express depends on it and express is so foundational in node\n            // 2. this is logging code and the risk of this causing a break is minimal\n            // eslint-disable-next-line no-underscore-dangle\n            debug('response finished - status: %d, headers: %o', res.statusCode, res._headers);\n            resolve(res);\n          });\n          res.on('error', reject);\n        });\n      });\n    };\n  }\n\n  return function slackMessageAdapterMiddleware(req, res, next) {\n    debug('request received - method: %s, path: %s', req.method, req.path);\n\n    // Bind a response function to this request's respond object. This may be used in a number of\n    // places\n    const respond = sendResponse(res);\n\n    // Check that the request body has been parsed\n    if (!req.body) {\n      const error = new Error('The incoming HTTP request did not have a parsed body.');\n      error.code = errorCodes.NO_BODY_PARSER;\n      next(error);\n      return;\n    }\n\n    if (req.body.ssl_check) {\n      respond({ status: 200 });\n      return;\n    }\n\n    const payload = JSON.parse(req.body.payload);\n\n    // Handle request token verification\n    if (!payload.token || payload.token !== adapter.verificationToken) {\n      debug('request token verification failure');\n      const error = new Error('Slack interactive message verification failed');\n      error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n      next(error);\n      return;\n    }\n    debug('request token verification success');\n\n    respond(adapter.dispatch(payload))\n      .catch(next);\n  };\n}\n"]}