'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _lodash = require('lodash.isstring');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isplainobject');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.isregexp');

var _lodash6 = _interopRequireDefault(_lodash5);

var _lodash7 = require('lodash.isfunction');

var _lodash8 = _interopRequireDefault(_lodash7);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _expressMiddleware = require('./express-middleware');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = (0, _debug2.default)('@slack/interactive-messages:adapter');

/**
 * Transforms various forms of matching constraints to a single standard object shape
 * @param {string|RegExp|Object} matchingConstraints - the various forms of matching constraints
 * accepted
 * @returns {Object} - an object where each matching constraint is a property
 */
function formatMatchingConstraints(matchingConstraints) {
  var ret = {};
  if (!(0, _lodash4.default)(matchingConstraints)) {
    ret.callbackId = matchingConstraints;
  } else {
    ret = Object.assign({}, matchingConstraints);
  }
  return ret;
}

/**
 * Validates general properties of a matching constraints object
 * @param {Object} matchingConstraints - object describing the constraints on a callback
 * @return {Error|false} - a false value represents successful validation, otherwise an error to
 * describe why validation failed.
 */
function validateConstraints(matchingConstraints) {
  if (matchingConstraints.callbackId && !((0, _lodash2.default)(matchingConstraints.callbackId) || (0, _lodash6.default)(matchingConstraints.callbackId))) {
    return new TypeError('Callback ID must be a string or RegExp');
  }

  return false;
}

/**
 * Validates properties of a matching constraints object specific to registering an action
 * @param {Object} matchingConstraints - object describing the constraints on a callback
 * @return {Error|false} - a false value represents successful validation, otherwise an error to
 * describe why validation failed.
 */
function validateActionConstraints(actionConstraints) {
  if (actionConstraints.type && !(actionConstraints.type === 'select' || actionConstraints.type === 'button')) {
    return new TypeError('Type must be \'select\' or \'button\'');
  }

  // We don't need to validate unfurl, we'll just cooerce it to a boolean
  return false;
}

var SlackMessageAdapter = function () {
  /**
   * Create a message adapter.
   *
   * @param {string} verificationToken - Slack app verification token used to authenticate request
   */
  function SlackMessageAdapter(verificationToken) {
    _classCallCheck(this, SlackMessageAdapter);

    if (!(0, _lodash2.default)(verificationToken)) {
      throw new TypeError('SlackMessageAdapter needs a verification token');
    }

    this.verificationToken = verificationToken;
    this.callbacks = [];
    this.axios = _axios2.default.create({
      headers: {
        'User-Agent': (0, _util.packageIdentifier)()
      }
    });

    debug('instantiated');
  }

  /**
   * Create a server that's ready to serve requests from Slack's interactive messages.
   *
   * @param {string} [path=/slack/actions] - The path portion of the URL where the server will
   * listen for requests from Slack's interactive messages.
   */


  _createClass(SlackMessageAdapter, [{
    key: 'createServer',
    value: function createServer() {
      var _this = this;

      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/slack/actions';

      // TODO: more options (like https)
      return Promise.resolve().then(function () {
        return Promise.all([Promise.resolve(require(('express'))), Promise.resolve(require(('body-parser')))]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            express = _ref2[0],
            bodyParser = _ref2[1];

        var app = express();
        app.use(bodyParser.urlencoded({ extended: false }));
        app.post(path, _this.expressMiddleware());

        debug('server created - path: %s', path);

        return _http2.default.createServer(app);
      });
    }
  }, {
    key: 'start',
    value: function start(port) {
      var _this2 = this;

      return this.createServer().then(function (server) {
        return new Promise(function (resolve, reject) {
          _this2.server = server;
          server.on('error', reject);
          server.listen(port, function () {
            return resolve(server);
          });
          debug('server started - port: %s', port);
        });
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_this3.server) {
          _this3.server.close(function (error) {
            delete _this3.server;
            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        } else {
          reject(new Error('SlackMessageAdapter cannot stop when it did not start a server'));
        }
      });
    }
  }, {
    key: 'expressMiddleware',
    value: function expressMiddleware() {
      return (0, _expressMiddleware.createExpressMiddleware)(this);
    }
  }, {
    key: 'action',
    value: function action(matchingConstraints, callback) {
      var actionConstraints = formatMatchingConstraints(matchingConstraints);

      var error = validateConstraints(actionConstraints) || validateActionConstraints(actionConstraints);
      if (error) {
        debug('action could not be registered: %s', error.message);
        throw error;
      }

      return this.registerCallback(actionConstraints, callback);
    }
  }, {
    key: 'options',
    value: function options(matchingConstraints, callback) {
      var optionsConstraints = formatMatchingConstraints(matchingConstraints);

      var error = validateConstraints(optionsConstraints);
      if (error) {
        debug('options could not be registered: %s', error.message);
        throw error;
      }

      return this.registerCallback(optionsConstraints, callback);
    }

    /* @private */

  }, {
    key: 'registerCallback',
    value: function registerCallback(constraints, callback) {
      // Validation
      if (!(0, _lodash8.default)(callback)) {
        debug('did not register callback because its not a function');
        throw new TypeError('callback must be a function');
      }

      this.callbacks.push([constraints, callback]);

      return this;
    }
  }, {
    key: 'dispatch',
    value: function dispatch(payload) {
      var _this4 = this;

      var action = payload.actions && payload.actions[0];

      // The following result value represents "no replacement"
      var result = { status: 200 };
      // when the matcher finds a dialog submission, it will populate this value with a function
      var dialogPromiseResolve = void 0;
      var respond = function respond(message) {
        if (payload.response_url) {
          debug('sending async response');
          return _this4.axios.post(payload.response_url, message);
        } else if (dialogPromiseResolve) {
          dialogPromiseResolve(message);
        }
        return true;
      };

      this.callbacks.some(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            constraints = _ref4[0],
            fn = _ref4[1];

        // Returning false in this function continues the iteration, and returning true ends it.
        // The pattern is that we assign a value to `result` and then return true. We only desire one
        // result for the response.
        var callbackResult = void 0;

        if (constraints.callbackId) {
          if ((0, _lodash2.default)(constraints.callbackId) && payload.callback_id !== constraints.callbackId) {
            return false;
          }
          if ((0, _lodash6.default)(constraints.callbackId) && !constraints.callbackId.test(payload.callback_id)) {
            return false;
          }
        }

        if (action && constraints.type && constraints.type !== action.type) {
          return false;
        }

        if ('unfurl' in constraints && (constraints.unfurl && !payload.is_app_unfurl || !constraints.unfurl && payload.is_app_unfurl)) {
          return false;
        }

        try {
          callbackResult = fn.call(_this4, payload, respond);
        } catch (error) {
          debug('callback error: %o', error);
          result = { status: 500 };
          return true;
        }

        // Dialog submissions must be responded to in under 3 seconds
        // Setting timeout to  2.5 seconds to account for propagation
        if (payload.type === 'dialog_submission') {
          var ms = 2500;
          if (callbackResult) {
            result = { status: 200, content: (0, _util.promiseTimeout)(ms, callbackResult) };
          } else {
            result = {
              status: 200, content: new Promise(function (resolve) {
                dialogPromiseResolve = resolve;
              })
            };
          }
          return true;
        }

        if (callbackResult) {
          // Checking for Promise type
          if (typeof callbackResult.then === 'function') {
            callbackResult.then(respond).catch(function (error) {
              debug('async error for callback. callback_id: %s, error: %s', payload.callback_id, error.message);
            });
            return true;
          }
          result = { status: 200, content: callbackResult };
          return true;
        }
        return true;
      });

      return result;
    }
  }]);

  return SlackMessageAdapter;
}();

exports.default = SlackMessageAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=adapter.js.map