'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;
exports.createExpressMiddleware = createExpressMiddleware;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorCodes = exports.errorCodes = {
  NO_BODY_PARSER: 'SLACKMESSAGEMIDDLEWARE_NO_BODY_PARSER',
  TOKEN_VERIFICATION_FAILURE: 'SLACKMESSAGEMIDDLEWARE_TOKEN_VERIFICATION_FAILURE'
};

var debug = (0, _debug2.default)('@slack/interactive-messages:express-middleware');

function createExpressMiddleware(adapter) {
  var poweredBy = (0, _util.packageIdentifier)();

  // This function binds a specific response instance to a function
  function sendResponse(res) {
    return function _sendResponse(dispatchResult) {
      var status = dispatchResult.status,
          content = dispatchResult.content;

      var contentReady = content && typeof content.then === 'function' ? content : Promise.resolve(content);
      return contentReady.then(function (c) {
        res.status(status);
        res.set('X-Slack-Powered-By', poweredBy);
        if (c) {
          res.json(c);
        } else {
          res.end();
        }
        return new Promise(function (resolve, reject) {
          res.on('finish', function () {
            // res._headers is an undocumented property, but we feel comfortable using it because:
            // 1. express depends on it and express is so foundational in node
            // 2. this is logging code and the risk of this causing a break is minimal
            // eslint-disable-next-line no-underscore-dangle
            debug('response finished - status: %d, headers: %o', res.statusCode, res._headers);
            resolve(res);
          });
          res.on('error', reject);
        });
      });
    };
  }

  return function slackMessageAdapterMiddleware(req, res, next) {
    debug('request received - method: %s, path: %s', req.method, req.path);

    // Bind a response function to this request's respond object. This may be used in a number of
    // places
    var respond = sendResponse(res);

    // Check that the request body has been parsed
    if (!req.body) {
      var error = new Error('The incoming HTTP request did not have a parsed body.');
      error.code = errorCodes.NO_BODY_PARSER;
      next(error);
      return;
    }

    if (req.body.ssl_check) {
      respond({ status: 200 });
      return;
    }

    var payload = JSON.parse(req.body.payload);

    // Handle request token verification
    if (!payload.token || payload.token !== adapter.verificationToken) {
      debug('request token verification failure');
      var _error = new Error('Slack interactive message verification failed');
      _error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;
      next(_error);
      return;
    }
    debug('request token verification success');

    respond(adapter.dispatch(payload)).catch(next);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leHByZXNzLW1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiY3JlYXRlRXhwcmVzc01pZGRsZXdhcmUiLCJlcnJvckNvZGVzIiwiTk9fQk9EWV9QQVJTRVIiLCJUT0tFTl9WRVJJRklDQVRJT05fRkFJTFVSRSIsImRlYnVnIiwiYWRhcHRlciIsInBvd2VyZWRCeSIsInNlbmRSZXNwb25zZSIsInJlcyIsIl9zZW5kUmVzcG9uc2UiLCJkaXNwYXRjaFJlc3VsdCIsInN0YXR1cyIsImNvbnRlbnQiLCJjb250ZW50UmVhZHkiLCJ0aGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjIiwic2V0IiwianNvbiIsImVuZCIsInJlamVjdCIsIm9uIiwic3RhdHVzQ29kZSIsIl9oZWFkZXJzIiwic2xhY2tNZXNzYWdlQWRhcHRlck1pZGRsZXdhcmUiLCJyZXEiLCJuZXh0IiwibWV0aG9kIiwicGF0aCIsInJlc3BvbmQiLCJib2R5IiwiZXJyb3IiLCJFcnJvciIsImNvZGUiLCJzc2xfY2hlY2siLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwidG9rZW4iLCJ2ZXJpZmljYXRpb25Ub2tlbiIsImRpc3BhdGNoIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7OztRQVVnQkEsdUIsR0FBQUEsdUI7O0FBVmhCOzs7O0FBQ0E7Ozs7QUFFTyxJQUFNQyxrQ0FBYTtBQUN4QkMsa0JBQWdCLHVDQURRO0FBRXhCQyw4QkFBNEI7QUFGSixDQUFuQjs7QUFLUCxJQUFNQyxRQUFRLHFCQUFhLGdEQUFiLENBQWQ7O0FBRU8sU0FBU0osdUJBQVQsQ0FBaUNLLE9BQWpDLEVBQTBDO0FBQy9DLE1BQU1DLFlBQVksOEJBQWxCOztBQUVBO0FBQ0EsV0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDekIsV0FBTyxTQUFTQyxhQUFULENBQXVCQyxjQUF2QixFQUF1QztBQUFBLFVBQ3BDQyxNQURvQyxHQUNoQkQsY0FEZ0IsQ0FDcENDLE1BRG9DO0FBQUEsVUFDNUJDLE9BRDRCLEdBQ2hCRixjQURnQixDQUM1QkUsT0FENEI7O0FBRTVDLFVBQU1DLGVBQWdCRCxXQUFXLE9BQU9BLFFBQVFFLElBQWYsS0FBd0IsVUFBcEMsR0FBa0RGLE9BQWxELEdBQTRERyxRQUFRQyxPQUFSLENBQWdCSixPQUFoQixDQUFqRjtBQUNBLGFBQU9DLGFBQWFDLElBQWIsQ0FBa0IsVUFBQ0csQ0FBRCxFQUFPO0FBQzlCVCxZQUFJRyxNQUFKLENBQVdBLE1BQVg7QUFDQUgsWUFBSVUsR0FBSixDQUFRLG9CQUFSLEVBQThCWixTQUE5QjtBQUNBLFlBQUlXLENBQUosRUFBTztBQUNMVCxjQUFJVyxJQUFKLENBQVNGLENBQVQ7QUFDRCxTQUZELE1BRU87QUFDTFQsY0FBSVksR0FBSjtBQUNEO0FBQ0QsZUFBTyxJQUFJTCxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVSyxNQUFWLEVBQXFCO0FBQ3RDYixjQUFJYyxFQUFKLENBQU8sUUFBUCxFQUFpQixZQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0FsQixrQkFBTSw2Q0FBTixFQUFxREksSUFBSWUsVUFBekQsRUFBcUVmLElBQUlnQixRQUF6RTtBQUNBUixvQkFBUVIsR0FBUjtBQUNELFdBUEQ7QUFRQUEsY0FBSWMsRUFBSixDQUFPLE9BQVAsRUFBZ0JELE1BQWhCO0FBQ0QsU0FWTSxDQUFQO0FBV0QsT0FuQk0sQ0FBUDtBQW9CRCxLQXZCRDtBQXdCRDs7QUFFRCxTQUFPLFNBQVNJLDZCQUFULENBQXVDQyxHQUF2QyxFQUE0Q2xCLEdBQTVDLEVBQWlEbUIsSUFBakQsRUFBdUQ7QUFDNUR2QixVQUFNLHlDQUFOLEVBQWlEc0IsSUFBSUUsTUFBckQsRUFBNkRGLElBQUlHLElBQWpFOztBQUVBO0FBQ0E7QUFDQSxRQUFNQyxVQUFVdkIsYUFBYUMsR0FBYixDQUFoQjs7QUFFQTtBQUNBLFFBQUksQ0FBQ2tCLElBQUlLLElBQVQsRUFBZTtBQUNiLFVBQU1DLFFBQVEsSUFBSUMsS0FBSixDQUFVLHVEQUFWLENBQWQ7QUFDQUQsWUFBTUUsSUFBTixHQUFhakMsV0FBV0MsY0FBeEI7QUFDQXlCLFdBQUtLLEtBQUw7QUFDQTtBQUNEOztBQUVELFFBQUlOLElBQUlLLElBQUosQ0FBU0ksU0FBYixFQUF3QjtBQUN0QkwsY0FBUSxFQUFFbkIsUUFBUSxHQUFWLEVBQVI7QUFDQTtBQUNEOztBQUVELFFBQU15QixVQUFVQyxLQUFLQyxLQUFMLENBQVdaLElBQUlLLElBQUosQ0FBU0ssT0FBcEIsQ0FBaEI7O0FBRUE7QUFDQSxRQUFJLENBQUNBLFFBQVFHLEtBQVQsSUFBa0JILFFBQVFHLEtBQVIsS0FBa0JsQyxRQUFRbUMsaUJBQWhELEVBQW1FO0FBQ2pFcEMsWUFBTSxvQ0FBTjtBQUNBLFVBQU00QixTQUFRLElBQUlDLEtBQUosQ0FBVSwrQ0FBVixDQUFkO0FBQ0FELGFBQU1FLElBQU4sR0FBYWpDLFdBQVdFLDBCQUF4QjtBQUNBd0IsV0FBS0ssTUFBTDtBQUNBO0FBQ0Q7QUFDRDVCLFVBQU0sb0NBQU47O0FBRUEwQixZQUFRekIsUUFBUW9DLFFBQVIsQ0FBaUJMLE9BQWpCLENBQVIsRUFDR00sS0FESCxDQUNTZixJQURUO0FBRUQsR0FsQ0Q7QUFtQ0QiLCJmaWxlIjoiZXhwcmVzcy1taWRkbGV3YXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnRmFjdG9yeSBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBwYWNrYWdlSWRlbnRpZmllciB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBlcnJvckNvZGVzID0ge1xuICBOT19CT0RZX1BBUlNFUjogJ1NMQUNLTUVTU0FHRU1JRERMRVdBUkVfTk9fQk9EWV9QQVJTRVInLFxuICBUT0tFTl9WRVJJRklDQVRJT05fRkFJTFVSRTogJ1NMQUNLTUVTU0FHRU1JRERMRVdBUkVfVE9LRU5fVkVSSUZJQ0FUSU9OX0ZBSUxVUkUnLFxufTtcblxuY29uc3QgZGVidWcgPSBkZWJ1Z0ZhY3RvcnkoJ0BzbGFjay9pbnRlcmFjdGl2ZS1tZXNzYWdlczpleHByZXNzLW1pZGRsZXdhcmUnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV4cHJlc3NNaWRkbGV3YXJlKGFkYXB0ZXIpIHtcbiAgY29uc3QgcG93ZXJlZEJ5ID0gcGFja2FnZUlkZW50aWZpZXIoKTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIGJpbmRzIGEgc3BlY2lmaWMgcmVzcG9uc2UgaW5zdGFuY2UgdG8gYSBmdW5jdGlvblxuICBmdW5jdGlvbiBzZW5kUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9zZW5kUmVzcG9uc2UoZGlzcGF0Y2hSZXN1bHQpIHtcbiAgICAgIGNvbnN0IHsgc3RhdHVzLCBjb250ZW50IH0gPSBkaXNwYXRjaFJlc3VsdDtcbiAgICAgIGNvbnN0IGNvbnRlbnRSZWFkeSA9IChjb250ZW50ICYmIHR5cGVvZiBjb250ZW50LnRoZW4gPT09ICdmdW5jdGlvbicpID8gY29udGVudCA6IFByb21pc2UucmVzb2x2ZShjb250ZW50KTtcbiAgICAgIHJldHVybiBjb250ZW50UmVhZHkudGhlbigoYykgPT4ge1xuICAgICAgICByZXMuc3RhdHVzKHN0YXR1cyk7XG4gICAgICAgIHJlcy5zZXQoJ1gtU2xhY2stUG93ZXJlZC1CeScsIHBvd2VyZWRCeSk7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgcmVzLmpzb24oYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgcmVzLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyByZXMuX2hlYWRlcnMgaXMgYW4gdW5kb2N1bWVudGVkIHByb3BlcnR5LCBidXQgd2UgZmVlbCBjb21mb3J0YWJsZSB1c2luZyBpdCBiZWNhdXNlOlxuICAgICAgICAgICAgLy8gMS4gZXhwcmVzcyBkZXBlbmRzIG9uIGl0IGFuZCBleHByZXNzIGlzIHNvIGZvdW5kYXRpb25hbCBpbiBub2RlXG4gICAgICAgICAgICAvLyAyLiB0aGlzIGlzIGxvZ2dpbmcgY29kZSBhbmQgdGhlIHJpc2sgb2YgdGhpcyBjYXVzaW5nIGEgYnJlYWsgaXMgbWluaW1hbFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgICAgICBkZWJ1ZygncmVzcG9uc2UgZmluaXNoZWQgLSBzdGF0dXM6ICVkLCBoZWFkZXJzOiAlbycsIHJlcy5zdGF0dXNDb2RlLCByZXMuX2hlYWRlcnMpO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlcy5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gc2xhY2tNZXNzYWdlQWRhcHRlck1pZGRsZXdhcmUocmVxLCByZXMsIG5leHQpIHtcbiAgICBkZWJ1ZygncmVxdWVzdCByZWNlaXZlZCAtIG1ldGhvZDogJXMsIHBhdGg6ICVzJywgcmVxLm1ldGhvZCwgcmVxLnBhdGgpO1xuXG4gICAgLy8gQmluZCBhIHJlc3BvbnNlIGZ1bmN0aW9uIHRvIHRoaXMgcmVxdWVzdCdzIHJlc3BvbmQgb2JqZWN0LiBUaGlzIG1heSBiZSB1c2VkIGluIGEgbnVtYmVyIG9mXG4gICAgLy8gcGxhY2VzXG4gICAgY29uc3QgcmVzcG9uZCA9IHNlbmRSZXNwb25zZShyZXMpO1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgcmVxdWVzdCBib2R5IGhhcyBiZWVuIHBhcnNlZFxuICAgIGlmICghcmVxLmJvZHkpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdUaGUgaW5jb21pbmcgSFRUUCByZXF1ZXN0IGRpZCBub3QgaGF2ZSBhIHBhcnNlZCBib2R5LicpO1xuICAgICAgZXJyb3IuY29kZSA9IGVycm9yQ29kZXMuTk9fQk9EWV9QQVJTRVI7XG4gICAgICBuZXh0KGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVxLmJvZHkuc3NsX2NoZWNrKSB7XG4gICAgICByZXNwb25kKHsgc3RhdHVzOiAyMDAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UocmVxLmJvZHkucGF5bG9hZCk7XG5cbiAgICAvLyBIYW5kbGUgcmVxdWVzdCB0b2tlbiB2ZXJpZmljYXRpb25cbiAgICBpZiAoIXBheWxvYWQudG9rZW4gfHwgcGF5bG9hZC50b2tlbiAhPT0gYWRhcHRlci52ZXJpZmljYXRpb25Ub2tlbikge1xuICAgICAgZGVidWcoJ3JlcXVlc3QgdG9rZW4gdmVyaWZpY2F0aW9uIGZhaWx1cmUnKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdTbGFjayBpbnRlcmFjdGl2ZSBtZXNzYWdlIHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICAgIGVycm9yLmNvZGUgPSBlcnJvckNvZGVzLlRPS0VOX1ZFUklGSUNBVElPTl9GQUlMVVJFO1xuICAgICAgbmV4dChlcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlYnVnKCdyZXF1ZXN0IHRva2VuIHZlcmlmaWNhdGlvbiBzdWNjZXNzJyk7XG5cbiAgICByZXNwb25kKGFkYXB0ZXIuZGlzcGF0Y2gocGF5bG9hZCkpXG4gICAgICAuY2F0Y2gobmV4dCk7XG4gIH07XG59XG4iXX0=
//# sourceMappingURL=express-middleware.js.map